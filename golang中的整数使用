package main

import (
	"fmt"
	"unsafe"
)

//演示golang中整数类型使用
func main() {

	var i  = 1
	fmt.Println("i=",i )

	//测试一下int8的范围
	//其他的  int16 int32  int64 类推即可
	//var j int -129  不可超出这个范围  int8的范围是（-128~127）
	//fmt.Println("j=",j)所以这个是错的，因为超出这个int8的范围了

	//测试一下uint8的范围其他的 uint16 uint32 uint64 一样
	var k uint16 = 256
	fmt.Println("k=",k)

	//int , uint, rune, byte 的使用
	var a  = 8900
	fmt.Println("a=",a)
	var b uint = 1
	var c byte = 255
	fmt.Println("b=",b,"c=",c)

	//整型的使用了细节
	var n1 = 100 //?n1是什么类型
	//这里我们给介绍一下如何查看某个变量的数据类型
	//fmt.Printf()可以用于做格式化输出
	fmt.Printf("n1 的类型 %T",n1)

	//如何在程序查看某个变量的占用字节大小和数据类型，（使用较多 ）
	var n2 int64 = 10
	fmt.Printf("n2 的 类型 %T n2占用的字节数是%d ",n2,unsafe.Sizeof(n2))

	//golang程序中整型变量在使用时，遵守保小不保大的原则
	//即，在程序中整型变量正确运行下，尽量使用占用空间小的数据类型
	//var age byte = 90


	}
